import java.util.Arrays;
import java.util.List;

public class ExactChangeNumber {

	// private static final int NUM_DENOMINATIONS = 3;
	public static final int PENCES_IN_POUND = 240;
	private static final int INF = 10000;// max can be if all denominations are
											// 1
	private static final int MULT_OF = 5;

	protected int[] results;
	
	ExactChangeNumber(){
		results = new int[PENCES_IN_POUND];
		for (int index = results.length - 1; index >= 0; index--) {
			results[index] = INF;
		}
	}
	
	final void calculateCostsForDenominations(int[] denominations){
		for (int denomination : denominations) {
			results[denomination] = 1;
		}

		calculateResult(results.length - 1, results, denominations);
	}
	/**
	 * 
	 * @return ignore index 0
	 */
	final int[] getCostsForDenominations(List<Integer> denominations) {		
		return results;
	}

	final float getCostGivenN(float N) {
		// todo: get float array to save conversion time
		float cost = 0;
		for (int result : results) {
			cost += result;
		}
		if (N > 1.0) {
			float penalty = 0.0f;
			float n = N - 1.0f;
			for (int index = 5; index <= PENCES_IN_POUND-1; index += 5) {
				penalty += results[index];
			}
			penalty *= n;
			cost += penalty;
		}
		return cost;
	}

	private final static int calculateResult(int index, int[] minCosts,
			List<Integer> denominations) {
		if (index < 1) {
			return INF;
		}

		if (minCosts[index] == INF) {
			// TODO: never try denomination bigger than parent call's
			for (int denomination : denominations) {
				if (denomination <= index) {
					int costWithThisDenomination = calculateResult(index
							- denomination, minCosts, denominations) + 1;
					if (costWithThisDenomination < minCosts[index]) {
						// better result found
						minCosts[index] = costWithThisDenomination;
					}
				}
			}
			// TODO: comment this when competing
			if (minCosts[index] == INF) {
				throw new InvalidDenominationsException();
			}
		}
		return minCosts[index];
	}
}
